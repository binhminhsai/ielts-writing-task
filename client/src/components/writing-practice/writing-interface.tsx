import React, { useState, useEffect } from "react";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { Editor } from "@/components/ui/editor";
import { Timer } from "@/components/ui/timer";
import { WordCounter } from "@/components/ui/word-counter";
import { useTimer } from "@/hooks/use-timer";
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Save, Layers, ArrowLeft, Eye, EyeOff, Smile } from "lucide-react";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { getOutline } from "@/data/outlines";
import { getVocabulary } from "@/data/vocabulary";
import { getPhrases, getStructuredPhrases, phraseCategories } from "@/data/phrases";
import { WritingTestType, DifficultyLevel } from "./test-setup";
import { Link } from "wouter";

// Outline component with tabs for outline and useful expressions
function OutlineSection({ testType, topic }: { testType: WritingTestType, topic: string }) {
  const [showOutline, setShowOutline] = useState(true);
  const outline = getOutline(testType, topic);

  return (
    <div className="h-full flex flex-col">
      {showOutline ? (
        <Tabs defaultValue="outline" className="w-full h-full flex flex-col">
          <div className="mb-4 relative">
            <TabsList className="w-full flex gap-1 bg-white rounded-xl p-1 border border-gray-200 shadow-sm">
              <TabsTrigger 
                value="outline" 
                className="flex-1 text-sm py-2.5 px-4 font-medium rounded-lg transition-all flex items-center justify-center gap-2
                        hover:bg-gray-50
                        data-[state=active]:border-2 data-[state=active]:border-primary data-[state=active]:text-primary data-[state=active]:font-bold"
              >
                <Layers className="h-4 w-4" />
                Suggested Outline
              </TabsTrigger>
              <TabsTrigger 
                value="expressions" 
                className="flex-1 text-sm py-2.5 px-4 font-medium rounded-lg transition-all flex items-center justify-center gap-2
                        hover:bg-gray-50
                        data-[state=active]:border-2 data-[state=active]:border-primary data-[state=active]:text-primary data-[state=active]:font-bold"
              >
                <Smile className="h-4 w-4" />
                Writing Guide
              </TabsTrigger>
            </TabsList>
          </div>

          <TabsContent 
            value="outline" 
            className="flex-1 overflow-y-auto mt-0 rounded-b-lg rounded-tr-lg border border-gray-200 bg-white p-4 shadow-md"
            style={{ height: '500px' }}
          >
            <div>
              <h4 className="font-semibold text-primary mb-3 text-sm flex items-center gap-1.5">
                <Layers className="h-4 w-4" />
                Suggested Outline - ƒê·ªÅ xu·∫•t c·∫•u tr√∫c b√†i vi·∫øt
              </h4>
              <p className="text-xs mb-4 text-gray-600 italic bg-gray-50 p-2 rounded-md border border-gray-100">
                C·∫•u tr√∫c ƒë·ªÅ xu·∫•t gi√∫p b·∫°n t·ªï ch·ª©c √Ω t∆∞·ªüng v√† vi·∫øt b√†i t·ªët h∆°n
              </p>

              <div className="overflow-y-auto" style={{ maxHeight: '430px' }}>
                <Accordion type="single" collapsible className="w-full space-y-2">
                  {/* Overall Outline as the first item */}
                  <AccordionItem 
                    value="overall-outline"
                    className="border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                  >
                    <AccordionTrigger 
                      className="text-sm font-medium py-3 px-4 hover:no-underline bg-gradient-to-r from-primary/5 to-transparent hover:from-primary/10"
                    >
                      <span className="flex items-center gap-2">
                        <span className="flex justify-center items-center w-6 h-6 rounded-full bg-primary/10 text-primary text-xs">
                          1
                        </span>
                        Overall Outline
                      </span>
                    </AccordionTrigger>
                    <AccordionContent className="p-3 bg-white">
                      <div className="space-y-3">
                        <div className="p-3 rounded-md border border-blue-100 bg-[#f9fafb] text-[#374151]">
                          <p className="mb-2 text-[#1fb2aa] font-bold text-[12px]">Introduction (2 c√¢u)</p>
                          <ul className="text-xs space-y-1 list-disc pl-4 text-[#374151]">
                            <li><strong>C√¢u 1:</strong> Gi·ªõi thi·ªáu v·∫•n ƒë·ªÅ v√† paraphrase ƒë·ªÅ.</li>
                            <li><strong>C√¢u 2:</strong> Thesis Statement ‚Äì n√™u 2 quan ƒëi·ªÉm v√† kh·∫≥ng ƒë·ªãnh l·∫≠p tr∆∞·ªùng.</li>
                          </ul>
                        </div>
                        <div className="p-3 rounded-md border border-green-100 bg-[#f9fafb]">
                          <p className="text-xs mb-2 font-bold text-[#1fb2aa]">Body Paragraph 1 ‚Äì Quan ƒëi·ªÉm th·ª© nh·∫•t</p>
                          <ul className="text-xs space-y-1 list-disc pl-4 text-[#374151] font-normal">
                            <li className="font-normal"><strong>Topic Sentence.</strong></li>
                            <li><strong>Gi·∫£i th√≠ch l√Ω do, n√™u l·ª£i √≠ch, v√≠ d·ª• c·ª• th·ªÉ.</strong></li>
                            <li><strong>G·ª£i √Ω t·ª´ n·ªëi:</strong> Firstly, Moreover, For instance...</li>
                          </ul>
                        </div>
                        <div className="bg-purple-50 p-3 rounded-md border border-purple-100">
                          <p className="text-xs font-medium text-purple-800 mb-2">üìñ Body Paragraph 2 ‚Äì Quan ƒëi·ªÉm th·ª© hai</p>
                          <ul className="text-xs text-purple-700 space-y-1 list-disc pl-4">
                            <li><strong>Topic Sentence.</strong></li>
                            <li><strong>Ph√¢n t√≠ch s√¢u, l·ª£i √≠ch d√†i h·∫°n, v√≠ d·ª• k·ªπ nƒÉng m·ªÅm.</strong></li>
                            <li><strong>G·ª£i √Ω t·ª´ n·ªëi:</strong> Conversely, Primarily, Furthermore...</li>
                          </ul>
                        </div>
                        <div className="bg-orange-50 p-3 rounded-md border border-orange-100">
                          <p className="text-xs font-medium text-orange-800 mb-2">‚úÖ Conclusion (2 c√¢u)</p>
                          <ul className="text-xs text-orange-700 space-y-1 list-disc pl-4">
                            <li><strong>T√≥m t·∫Øt l·∫°i 2 quan ƒëi·ªÉm ƒë√£ n√™u.</strong></li>
                            <li><strong>T√°i kh·∫≥ng ƒë·ªãnh quan ƒëi·ªÉm c√° nh√¢n, th√™m 1 c√¢u khuy·∫øn ngh·ªã n·∫øu c·∫ßn.</strong></li>
                          </ul>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>

                  {outline.slice(0, 3).map((section, index) => (
                    <AccordionItem 
                      key={`outline-${index}`} 
                      value={`section-${index}`}
                      className="border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                    >
                      <AccordionTrigger 
                        className="text-sm font-medium py-3 px-4 hover:no-underline bg-gradient-to-r from-primary/5 to-transparent hover:from-primary/10"
                      >
                        <span className="flex items-center gap-2">
                          <span className="flex justify-center items-center w-6 h-6 rounded-full bg-primary/10 text-primary text-xs">
                            {index + 2}
                          </span>
                          {section.title}
                        </span>
                      </AccordionTrigger>
                      <AccordionContent className="p-3 bg-white">
                        {index === 0 && (
                          <div className="mt-3 space-y-3">
                            <div className="p-3 bg-gray-50 rounded-md border border-gray-100 text-xs text-gray-700">
                              <p className="mb-2 font-medium text-primary">H∆∞·ªõng d·∫´n:</p>
                              <p className="mb-2">M·ªü b√†i 2 c√¢u ‚Äì paraphrase ƒë·ªÅ + thesis statement</p>
                            </div>
                            
                            <div className="p-3 rounded-md border border-blue-100 text-xs text-blue-700 bg-[#f9fafb]">
                              <p className="mb-2 font-medium text-[#1fb2aa]">C√¢u 1 ‚Äì Paraphrase ƒë·ªÅ b√†i</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>M·ª•c ƒë√≠ch:</strong> Paraphrase v·∫•n ƒë·ªÅ ch√≠nh trong c√¢u h·ªèi</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>V√≠ d·ª•:</strong> "The financial remuneration of elite sports professionals often far surpasses that of individuals in crucial societal roles, such as healthcare providers and educators, a phenomenon that sparks considerable debate regarding its fairness."</p>
                            </div>
                            
                            <div className="p-3 rounded-md border border-green-100 text-xs text-green-700 bg-[#f9fafb]">
                              <p className="mb-2 font-medium text-[#1fb2aa]">C√¢u 2 ‚Äì Thesis Statement</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>M·ª•c ƒë√≠ch:</strong> Thesis statement ph√π h·ª£p v·ªõi Opinion essay ‚Äì To what extent agree/disagree (B√†i lu·∫≠n n√™u quan ƒëi·ªÉm c√° nh√¢n v·ªÅ m·ª©c ƒë·ªô ƒë·ªìng √Ω/kh√¥ng ƒë·ªìng √Ω).</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>V√≠ d·ª•:</strong> "While I acknowledge the market-driven forces that inflate athletes' incomes, I largely contend that this significant disparity is fundamentally inequitable when considering the indispensable societal contributions of other professions."</p>
                            </div>
                          </div>
                        )}
                        {index === 1 && (
                          <div className="mt-3 space-y-3">
                            <div className="p-3 rounded-md border border-blue-100 text-xs text-blue-700 bg-[#f9fafb]">
                              <p className="mb-2 font-bold text-[#1fb2aa]">Topic Sentence</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>Content:</strong> D·ªãch v√† c·∫£i ti·∫øn topic sentence n√†y sang ti·∫øng Anh: "On the one hand, there are compelling arguments to suggest that the exorbitant salaries of top athletes are indeed justified, primarily due to the unique nature of their profession and the entertainment value they provide."</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>V√≠ d·ª•:</strong> On the one hand, there are compelling arguments to suggest that the exorbitant salaries of top athletes are indeed justified, primarily due to the unique nature of their profession and the entertainment value they provide.</p>
                            </div>
                            
                            <div className="p-3 rounded-md border border-green-100 text-xs text-green-700 bg-[#f9fafb]">
                              <p className="mb-2 text-[#1fb2aa] font-bold">Supporting Idea 1</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>Idea:</strong> Scarcity of exceptional talent and short career span</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>V√≠ d·ª• c·ª• th·ªÉ:</strong> Athletes like Lionel Messi or Serena Williams possess a rare combination of physical prowess, mental fortitude, and dedication, making them truly one in a million. Their peak performance window is often limited to a decade or so.</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>Development:</strong> This extreme scarcity of top-tier talent, combined with a brief professional lifespan, means that their market value is inherently high. Consequently, they must earn a substantial amount during their active years to secure their financial future after retirement.</p>
                            </div>
                            
                            <div className="p-3 bg-purple-50 rounded-md border border-purple-100 text-xs text-purple-700">
                              <p className="mb-2 font-medium text-purple-800">Supporting Idea 2</p>
                              <p className="mb-2">‚Ä¢ <strong>Idea:</strong> Massive revenue generation and global entertainment appeal</p>
                              <p className="mb-2">‚Ä¢ <strong>V√≠ d·ª• c·ª• th·ªÉ:</strong> Major sporting events, such as the FIFA World Cup or the Olympic Games, attract billions of viewers worldwide, leading to colossal revenues from broadcasting rights, sponsorships, merchandise sales, and ticket revenues. Top athletes are central to this multi-billion dollar industry.</p>
                              <p className="mb-2">‚Ä¢ <strong>Development:</strong> These professionals are not merely players; they are global brands and entertainers who drive immense commercial success for leagues, teams, and related businesses. Their salaries, while large, often represent a fraction of the total revenue they help generate for various stakeholders, justifying their earnings through their direct economic impact.</p>
                            </div>
                          </div>
                        )}
                        {index === 2 && (
                          <div className="mt-3 space-y-3">
                            <div className="p-3 rounded-md border border-orange-100 text-xs text-orange-700 bg-[#f9fafb]">
                              <p className="mb-2 text-[#1fb2aa] font-bold">Topic Sentence</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>Content:</strong> D·ªãch v√† c·∫£i ti·∫øn topic sentence n√†y sang ti·∫øng Anh: "However, it is equally understandable why many people perceive this disparity as unfair, given the vital contributions of professions such as nursing, medicine, and teaching to the fundamental well-being and development of society."</p>
                              <p className="mb-2 text-[#374151]">‚Ä¢ <strong>V√≠ d·ª•:</strong> However, it is equally understandable why many people perceive this disparity as unfair, given the vital contributions of professions such as nursing, medicine, and teaching to the fundamental well-being and development of society.</p>
                            </div>
                            
                            <div className="p-3 bg-red-50 rounded-md border border-red-100 text-xs text-red-700">
                              <p className="mb-2 font-medium text-red-800">Supporting Idea 1</p>
                              <p className="mb-2">‚Ä¢ <strong>Idea:</strong> Direct and indispensable impact on human welfare and societal progress</p>
                              <p className="mb-2">‚Ä¢ <strong>V√≠ d·ª• c·ª• th·ªÉ:</strong> Nurses provide critical frontline care, often working long, gruelling shifts to save lives and alleviate suffering, as evidenced profoundly during the COVID-19 pandemic. Doctors diagnose and treat diseases, while teachers educate and shape the minds of future generations, fostering societal knowledge and innovation.</p>
                              <p className="mb-2">‚Ä¢ <strong>Development:</strong> Unlike the entertainment value offered by sports, these professions directly impact human health, safety, and intellectual growth. Their work is fundamental to the very fabric of society, yet their compensation often fails to reflect the profound positive externalities they create.</p>
                            </div>
                            
                            <div className="p-3 bg-indigo-50 rounded-md border border-indigo-100 text-xs text-indigo-700">
                              <p className="mb-2 font-medium text-indigo-800">Supporting Idea 2</p>
                              <p className="mb-2">‚Ä¢ <strong>Idea:</strong> Extensive training, high responsibility, and demanding working conditions</p>
                              <p className="mb-2">‚Ä¢ <strong>V√≠ d·ª• c·ª• th·ªÉ:</strong> Medical professionals undergo a decade or more of rigorous academic and practical training, accumulating significant debt, before assuming roles with immense responsibility for human lives. Similarly, teachers manage large classes, diverse learning needs, and administrative burdens, often sacrificing personal time for student development.</p>
                              <p className="mb-2">‚Ä¢ <strong>Development:</strong> The substantial investment in education, coupled with the emotional and physical toll of dealing with life-and-death situations or challenging educational environments, contrasts sharply with the often lower financial rewards. This imbalance suggests a societal undervaluation of critical services over entertainment.</p>
                            </div>
                          </div>
                        )}
                      </AccordionContent>
                    </AccordionItem>
                  ))}
                  
                  {/* Conclusion section as the 5th item */}
                  <AccordionItem 
                    value="conclusion"
                    className="border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                  >
                    <AccordionTrigger 
                      className="text-sm font-medium py-3 px-4 hover:no-underline bg-gradient-to-r from-primary/5 to-transparent hover:from-primary/10"
                    >
                      <span className="flex items-center gap-2">
                        <span className="flex justify-center items-center w-6 h-6 rounded-full bg-primary/10 text-primary text-xs">
                          5
                        </span>
                        Conclusion
                      </span>
                    </AccordionTrigger>
                    <AccordionContent className="p-3 bg-white">
                      <div className="mt-3 space-y-3">
                        <div className="p-3 bg-gray-50 rounded-md border border-gray-100 text-xs text-gray-700">
                          <p className="mb-2 font-medium text-primary">H∆∞·ªõng d·∫´n</p>
                          <p className="mb-2">K·∫øt b√†i 2 c√¢u ‚Äì summary + recommendation</p>
                        </div>
                        
                        <div className="p-3 bg-blue-50 rounded-md border border-blue-100 text-xs text-blue-700">
                          <p className="mb-2 font-medium text-blue-800">C√¢u 1 ‚Äì Summary</p>
                          <p className="mb-2">‚Ä¢ <strong>M·ª•c ƒë√≠ch:</strong> T√≥m t·∫Øt c·∫£ 2 ph·∫ßn body v√† main topic, kh√¥ng n√™u quan ƒëi·ªÉm m·ªõi</p>
                          <p className="mb-2">‚Ä¢ <strong>V√≠ d·ª•:</strong> In conclusion, while the immense earnings of top athletes can be attributed to their unique talent and the vast commercial machinery of global sports, it is equally compelling to argue that the remuneration for professions pivotal to societal welfare, such as nursing and teaching, is disproportionately low.</p>
                        </div>
                        
                        <div className="p-3 bg-emerald-50 rounded-md border border-emerald-100 text-xs text-emerald-700">
                          <p className="mb-2 font-medium text-emerald-800">C√¢u 2 ‚Äì Final Recommendation</p>
                          <p className="mb-2">‚Ä¢ <strong>M·ª•c ƒë√≠ch:</strong> Final recommendation v·ªÅ gi·∫£i ph√°p ho·∫∑c quan ƒëi·ªÉm b·ªÅn v·ªØng li√™n quan ƒë·∫øn: "Successful sports professionals can earn much more than those in other important professions, like nurses, doctors, and teachers. Some people think it is fully justified, while others believe it is unfair. To what extent do you agree or disagree?"</p>
                          <p className="mb-2">‚Ä¢ <strong>V√≠ d·ª•:</strong> Ultimately, I believe this disparity highlights a problematic imbalance in societal values, suggesting a greater need to acknowledge and justly reward those who contribute directly to the fundamental well-being and progress of humanity.</p>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
              </div>
            </div>
          </TabsContent>

          <TabsContent 
            value="expressions" 
            className="flex-1 overflow-y-auto mt-0 rounded-b-lg rounded-tr-lg border border-gray-200 bg-white p-4 shadow-md"
            style={{ height: '500px' }}
          >
            <div>
              <h4 className="font-semibold text-primary mb-3 text-sm flex items-center gap-1.5">
                <Smile className="h-4 w-4" />
                Writing Guide - H∆∞·ªõng d·∫´n c√°ch vi·∫øt
              </h4>
              <p className="text-xs mb-4 text-gray-600 italic bg-gray-50 p-2 rounded-md border border-gray-100">
                Nh·ªØng h∆∞·ªõng d·∫´n c·ª• th·ªÉ gi√∫p b·∫°n vi·∫øt b√†i hi·ªáu qu·∫£ h∆°n
              </p>

              <div className="overflow-y-auto" style={{ maxHeight: '430px' }}>
                <Accordion type="single" collapsible className="w-full space-y-2">
                  {/* Accordion 1: Highlight Keywords */}
                  <AccordionItem 
                    value="highlight-keywords"
                    className="border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                  >
                    <AccordionTrigger 
                      className="text-sm font-medium py-3 px-4 hover:no-underline bg-gradient-to-r from-primary/5 to-transparent hover:from-primary/10"
                    >
                      <span className="flex items-center gap-2">
                        <span className="flex justify-center items-center w-6 h-6 rounded-full bg-primary/10 text-primary text-xs">
                          1
                        </span>
                        Highlight Keywords
                      </span>
                    </AccordionTrigger>
                    <AccordionContent className="p-3 bg-white">
                      <div className="space-y-3">
                        <div className="bg-blue-50 p-3 rounded-md border border-blue-100">
                          <p className="text-xs font-medium text-blue-800 mb-2">Context & Reason:</p>
                          <p className="text-xs text-blue-700">
                            Nhi·ªÅu th√†nh ph·ªë tr√™n th·∫ø gi·ªõi ƒëang tr·∫£i qua s·ª± gia tƒÉng d√¢n s·ªë nhanh ch√≥ng, d·∫´n ƒë·∫øn c√°c v·∫•n ƒë·ªÅ nh∆∞ ƒë√¥ng ƒë√∫c, t·∫Øc ngh·∫Ωn giao th√¥ng v√† thi·∫øu h·ª•t nh√† ·ªü.
                          </p>
                        </div>
                        <div className="bg-green-50 p-3 rounded-md border border-green-100">
                          <p className="text-xs font-medium text-green-800 mb-2">Main Subject:</p>
                          <p className="text-xs text-green-700">
                            S·ª± gia tƒÉng d√¢n s·ªë t·∫°i c√°c th√†nh ph·ªë v√† nh·ªØng v·∫•n ƒë·ªÅ li√™n quan.
                          </p>
                        </div>
                        <div className="bg-purple-50 p-3 rounded-md border border-purple-100">
                          <p className="text-xs font-medium text-purple-800 mb-2">Perspectives:</p>
                          <ul className="text-xs text-purple-700 space-y-1 list-disc pl-4">
                            <li>Quan ƒëi·ªÉm 1: Nguy√™n nh√¢n c·ªßa s·ª± gia tƒÉng d√¢n s·ªë (tƒÉng tr∆∞·ªüng kinh t·∫ø, di c∆∞ t·ª´ n√¥ng th√¥n ra th√†nh ph·ªë)</li>
                            <li>Quan ƒëi·ªÉm 2: C√°c bi·ªán ph√°p ch√≠nh ph·ªß c√≥ th·ªÉ th·ª±c hi·ªán (x√¢y d·ª±ng c∆° s·ªü h·∫° t·∫ßng, quy ho·∫°ch ƒë√¥ th·ªã)</li>
                          </ul>
                        </div>
                        <div className="bg-orange-50 p-3 rounded-md border border-orange-100">
                          <p className="text-xs font-medium text-orange-800 mb-2">Main Task:</p>
                          <p className="text-xs text-orange-700">
                            Y√™u c·∫ßu c·ª• th·ªÉ: Ph√¢n t√≠ch nguy√™n nh√¢n v√† bi·ªán ph√°p gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ do s·ª± gia tƒÉng d√¢n s·ªë.
                          </p>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>

                  {/* Accordion 2: Identify Essay Type */}
                  <AccordionItem 
                    value="essay-type"
                    className="border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                  >
                    <AccordionTrigger 
                      className="text-sm font-medium py-3 px-4 hover:no-underline bg-gradient-to-r from-primary/5 to-transparent hover:from-primary/10"
                    >
                      <span className="flex items-center gap-2">
                        <span className="flex justify-center items-center w-6 h-6 rounded-full bg-primary/10 text-primary text-xs">
                          2
                        </span>
                        Identify Essay Type
                      </span>
                    </AccordionTrigger>
                    <AccordionContent className="p-3 bg-white">
                      <div className="space-y-3">
                        <div className="bg-red-50 p-3 rounded-md border border-red-100">
                          <p className="text-xs font-medium text-red-800 mb-2">Essay Type: Problem-Solution</p>
                        </div>
                        <div className="bg-yellow-50 p-3 rounded-md border border-yellow-100">
                          <p className="text-xs font-medium text-yellow-800 mb-2">Tips for Band 6.5:</p>
                          <ul className="text-xs text-yellow-700 space-y-1 list-disc pl-4">
                            <li><strong>Task Response:</strong> Tr·∫£ l·ªùi ƒë·ªß 2 ph·∫ßn: Ph√¢n t√≠ch nguy√™n nh√¢n + ƒê·ªÅ xu·∫•t bi·ªán ph√°p c·ª• th·ªÉ. √ù t∆∞·ªüng ph√°t tri·ªÉn kh√° ƒë·ªß, c√≥ gi·∫£i th√≠ch/v√≠ d·ª•.</li>
                            <li><strong>Coherence & Cohesion:</strong> B·ªë c·ª•c r√µ r√†ng (4 ƒëo·∫°n). D√πng nhi·ªÅu t·ª´ n·ªëi/li√™n k·∫øt. B√†i vi·∫øt d·ªÖ theo d√µi.</li>
                            <li><strong>Lexical Resource:</strong> T·ª´ v·ª±ng ƒë·ªß r·ªông cho ch·ªß ƒë·ªÅ. Paraphrase t·ªët. √çt l·ªói t·ª´ v·ª±ng/ch√≠nh t·∫£ kh√¥ng g√¢y kh√≥ hi·ªÉu.</li>
                            <li><strong>Grammatical Range:</strong> D√πng ƒëa d·∫°ng c·∫•u tr√∫c ng·ªØ ph√°p. M·∫Øc l·ªói ng·ªØ ph√°p nh∆∞ng kh√¥ng g√¢y kh√≥ hi·ªÉu.</li>
                          </ul>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>

                  {/* Accordion 3: Main Topic Aspects */}
                  <AccordionItem 
                    value="main-topic"
                    className="border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                  >
                    <AccordionTrigger 
                      className="text-sm font-medium py-3 px-4 hover:no-underline bg-gradient-to-r from-primary/5 to-transparent hover:from-primary/10"
                    >
                      <span className="flex items-center gap-2">
                        <span className="flex justify-center items-center w-6 h-6 rounded-full bg-primary/10 text-primary text-xs">
                          3
                        </span>
                        Main Topic Aspects
                      </span>
                    </AccordionTrigger>
                    <AccordionContent className="p-3 bg-white">
                      <div className="space-y-3">
                        <div className="bg-indigo-50 p-3 rounded-md border border-indigo-100">
                          <p className="text-xs font-medium text-indigo-800 mb-2">Main Idea:</p>
                          <p className="text-xs text-indigo-700">
                            S·ª± gia tƒÉng d√¢n s·ªë t·∫°i c√°c th√†nh ph·ªë ƒëang t·∫°o ra nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng, bao g·ªìm ƒë√¥ng ƒë√∫c, t·∫Øc ngh·∫Ωn giao th√¥ng v√† thi·∫øu nh√† ·ªü.
                          </p>
                        </div>
                        <div className="bg-teal-50 p-3 rounded-md border border-teal-100">
                          <p className="text-xs font-medium text-teal-800 mb-2">Supporting Sentences:</p>
                          <ul className="text-xs text-teal-700 space-y-1 list-disc pl-4">
                            <li>M·ªôt trong nh·ªØng nguy√™n nh√¢n ch√≠nh d·∫´n ƒë·∫øn s·ª± gia tƒÉng d√¢n s·ªë t·∫°i c√°c th√†nh ph·ªë l√† s·ª± ph√°t tri·ªÉn kinh t·∫ø m·∫°nh m·∫Ω, thu h√∫t ng∆∞·ªùi d√¢n t·ª´ c√°c v√πng n√¥ng th√¥n ƒë·∫øn t√¨m ki·∫øm c∆° h·ªôi vi·ªác l√†m.</li>
                            <li>ƒê·ªÉ gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ do s·ª± gia tƒÉng d√¢n s·ªë g√¢y ra, ch√≠nh ph·ªß c·∫ßn th·ª±c hi·ªán c√°c bi·ªán ph√°p nh∆∞ ƒë·∫ßu t∆∞ v√†o c∆° s·ªü h·∫° t·∫ßng v√† quy ho·∫°ch ƒë√¥ th·ªã h·ª£p l√Ω.</li>
                          </ul>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>

                  {/* Accordion 4: Tasks To Do */}
                  <AccordionItem 
                    value="tasks-todo"
                    className="border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                  >
                    <AccordionTrigger 
                      className="text-sm font-medium py-3 px-4 hover:no-underline bg-gradient-to-r from-primary/5 to-transparent hover:from-primary/10"
                    >
                      <span className="flex items-center gap-2">
                        <span className="flex justify-center items-center w-6 h-6 rounded-full bg-primary/10 text-primary text-xs">
                          4
                        </span>
                        Tasks To Do
                      </span>
                    </AccordionTrigger>
                    <AccordionContent className="p-3 bg-white">
                      <div className="bg-pink-50 p-3 rounded-md border border-pink-100">
                        <ul className="text-xs text-pink-700 space-y-2 list-disc pl-4">
                          <li><strong>Task 1:</strong> Ph√¢n t√≠ch nguy√™n nh√¢n c·ªßa s·ª± gia tƒÉng d√¢n s·ªë, bao g·ªìm c√°c y·∫øu t·ªë kinh t·∫ø v√† x√£ h·ªôi.</li>
                          <li><strong>Task 2:</strong> ƒê·ªÅ xu·∫•t c√°c bi·ªán ph√°p m√† ch√≠nh ph·ªß c√≥ th·ªÉ th·ª±c hi·ªán ƒë·ªÉ gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ nh∆∞ ƒë√¥ng ƒë√∫c v√† thi·∫øu nh√† ·ªü.</li>
                          <li><strong>Task 3:</strong> Cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ v·ªÅ c√°c th√†nh ph·ªë ƒë√£ th√†nh c√¥ng trong vi·ªác gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y.</li>
                        </ul>
                      </div>
                    </AccordionContent>
                  </AccordionItem>

                  {/* Accordion 5: Suggested Viewpoint */}
                  <AccordionItem 
                    value="suggested-viewpoint"
                    className="border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                  >
                    <AccordionTrigger 
                      className="text-sm font-medium py-3 px-4 hover:no-underline bg-gradient-to-r from-primary/5 to-transparent hover:from-primary/10"
                    >
                      <span className="flex items-center gap-2">
                        <span className="flex justify-center items-center w-6 h-6 rounded-full bg-primary/10 text-primary text-xs">
                          5
                        </span>
                        Suggested Viewpoint
                      </span>
                    </AccordionTrigger>
                    <AccordionContent className="p-3 bg-white">
                      <div className="space-y-3">
                        <div className="bg-emerald-50 p-3 rounded-md border border-emerald-100">
                          <p className="text-xs font-medium text-emerald-800 mb-2">Suggested View:</p>
                          <p className="text-xs text-emerald-700">
                            C·∫ßn c√≥ s·ª± can thi·ªáp t·ª´ ch√≠nh ph·ªß ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y m·ªôt c√°ch hi·ªáu qu·∫£.
                          </p>
                        </div>
                        <div className="bg-cyan-50 p-3 rounded-md border border-cyan-100">
                          <p className="text-xs font-medium text-cyan-800 mb-2">Reason:</p>
                          <p className="text-xs text-cyan-700">
                            Ch√≠nh ph·ªß c√≥ vai tr√≤ quan tr·ªçng trong vi·ªác qu·∫£n l√Ω s·ª± ph√°t tri·ªÉn ƒë√¥ th·ªã v√† c√≥ th·ªÉ √°p d·ª•ng c√°c ch√≠nh s√°ch h·ª£p l√Ω ƒë·ªÉ gi·∫£m thi·ªÉu c√°c v·∫•n ƒë·ªÅ do s·ª± gia tƒÉng d√¢n s·ªë g√¢y ra, nh∆∞ x√¢y d·ª±ng nh√† ·ªü gi√° r·∫ª v√† c·∫£i thi·ªán giao th√¥ng c√¥ng c·ªông.
                          </p>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      ) : (
        <div className="flex flex-col justify-center items-center h-full w-full bg-gradient-to-b from-gray-50 to-white border border-gray-200 rounded-lg p-8 shadow-sm">
          <Button
            variant="outline"
            size="sm"
            className="mb-4 bg-white hover:bg-gray-50 shadow-sm border-gray-200 px-4"
            onClick={() => setShowOutline(true)}
          >
            <Eye className="h-3.5 w-3.5 mr-2 text-primary" /> Show Support
          </Button>
          <p className="text-gray-700 font-medium text-base mb-2 text-center">H√£y c·ªë g·∫Øng h·∫øt m√¨nh nh√©!</p>
          <p className="text-primary font-medium text-sm text-center">Good things take time. üòâ</p>
        </div>
      )}
    </div>
  );
}

// Vocabulary and Phrases component
function ResourcesSection({ testType, topic }: { testType: WritingTestType, topic: string }) {
  const [activeTab, setActiveTab] = useState("vocabulary");
  const [showVocabulary, setShowVocabulary] = useState(false);
  const [showPhrases, setShowPhrases] = useState(false);
  const [showWordBank, setShowWordBank] = useState(false);
  const allVocabulary = getVocabulary(testType, topic);
  const phrases = getPhrases(testType);

  // Filter vocabulary for each tab
  const vocabularyWords = allVocabulary.flatMap(category => 
    category.words
      .filter(word => ["N", "V", "Adj", "Adv"].includes(word.partOfSpeech))
      .map(word => ({ ...word, type: category.type }))
  );

  // Additional vocabulary data
  const additionalVocabulary = [
    {
      word: "Sustainable",
      partOfSpeech: "Adj",
      difficulty: "B2",
      meaning: "C√≥ th·ªÉ duy tr√¨ ƒë∆∞·ª£c l√¢u d√†i, b·ªÅn v·ªØng",
      example: "Companies are trying to develop more sustainable business practices.",
      type: "positive"
    },
    {
      word: "Resilience",
      partOfSpeech: "N",
      difficulty: "C1",
      meaning: "Kh·∫£ nƒÉng ph·ª•c h·ªìi, s·ª©c b·ªÅn",
      example: "The community showed remarkable resilience in the face of economic hardship.",
      type: "positive"
    },
    {
      word: "Implement",
      partOfSpeech: "V",
      difficulty: "B2",
      meaning: "Th·ª±c hi·ªán, tri·ªÉn khai",
      example: "The government plans to implement new environmental regulations next year.",
      type: "neutral"
    },
    {
      word: "Unprecedented",
      partOfSpeech: "Adj",
      difficulty: "C1",
      meaning: "Ch∆∞a t·ª´ng c√≥ tr∆∞·ªõc ƒë√¢y, ch∆∞a t·ª´ng th·∫•y",
      example: "The pandemic caused unprecedented disruption to global supply chains.",
      type: "neutral"
    },
    {
      word: "Detrimental",
      partOfSpeech: "Adj",
      difficulty: "C1",
      meaning: "C√≥ h·∫°i, g√¢y t·ªïn h·∫°i",
      example: "Excessive screen time can be detrimental to children's development.",
      type: "negative"
    },
    {
      word: "Mitigate",
      partOfSpeech: "V",
      difficulty: "C1",
      meaning: "L√†m gi·∫£m, l√†m d·ªãu b·ªõt",
      example: "Companies are taking steps to mitigate their environmental impact.",
      type: "positive"
    },
    {
      word: "Profound",
      partOfSpeech: "Adj",
      difficulty: "C1",
      meaning: "S√¢u s·∫Øc, to l·ªõn",
      example: "Technology has had a profound effect on how we communicate with each other.",
      type: "neutral"
    },
    {
      word: "Advocate",
      partOfSpeech: "V",
      difficulty: "C1",
      meaning: "·ª¶ng h·ªô, bi·ªán h·ªô",
      example: "Many scientists advocate for stronger climate change policies.",
      type: "neutral"
    }
  ];

  // Combine vocabulary words
  const allVocabularyWords = [...vocabularyWords, ...additionalVocabulary];

  // Get phrase words from vocabulary data
  const phraseWords = allVocabulary.flatMap(category => 
    category.words
      .filter(word => word.partOfSpeech === "Phrase")
      .map(word => ({ ...word, type: category.type }))
  );

  // Additional collocations data
  const additionalCollocations = [
    {
      word: "Public health crisis",
      partOfSpeech: "Collocations",
      difficulty: "B2",
      meaning: "Kh·ªßng ho·∫£ng s·ª©c kh·ªèe c·ªông ƒë·ªìng",
      example: "The rise in heroin use has led to a public health crisis in many regions.",
      type: "neutral"
    },
    {
      word: "Climate change impact",
      partOfSpeech: "Collocations",
      difficulty: "B2",
      meaning: "T√°c ƒë·ªông c·ªßa bi·∫øn ƒë·ªïi kh√≠ h·∫≠u",
      example: "Researchers are studying the climate change impact on coastal communities.",
      type: "neutral"
    },
    {
      word: "Sustainable development goals",
      partOfSpeech: "Collocations",
      difficulty: "C1",
      meaning: "M·ª•c ti√™u ph√°t tri·ªÉn b·ªÅn v·ªØng",
      example: "Many countries are working to meet the sustainable development goals set by the United Nations.",
      type: "positive"
    },
    {
      word: "Digital literacy skills",
      partOfSpeech: "Collocations",
      difficulty: "B2",
      meaning: "K·ªπ nƒÉng s·ª≠ d·ª•ng c√¥ng ngh·ªá s·ªë",
      example: "Schools are focusing more on teaching digital literacy skills to prepare students for modern workplaces.",
      type: "positive"
    },
    {
      word: "Economic inequality gap",
      partOfSpeech: "Collocations",
      difficulty: "C1",
      meaning: "Kho·∫£ng c√°ch b·∫•t b√¨nh ƒë·∫≥ng kinh t·∫ø",
      example: "The economic inequality gap has widened in many developed countries over the past decade.",
      type: "negative"
    },
    {
      word: "Demographic shift",
      partOfSpeech: "Collocations",
      difficulty: "B2",
      meaning: "S·ª± thay ƒë·ªïi nh√¢n kh·∫©u h·ªçc",
      example: "The demographic shift toward an aging population has implications for healthcare systems worldwide.",
      type: "neutral"
    },
    {
      word: "Renewable energy sources",
      partOfSpeech: "Collocations",
      difficulty: "B1",
      meaning: "C√°c ngu·ªìn nƒÉng l∆∞·ª£ng t√°i t·∫°o",
      example: "Investing in renewable energy sources is essential for reducing carbon emissions.",
      type: "positive"
    },
    {
      word: "Global supply chain",
      partOfSpeech: "Collocations",
      difficulty: "B2",
      meaning: "Chu·ªói cung ·ª©ng to√†n c·∫ßu",
      example: "The pandemic has revealed vulnerabilities in global supply chains across many industries.",
      type: "neutral"
    }
  ];

  // Combine phrase words with additional collocations
  const allPhraseWords = [...phraseWords, ...additionalCollocations];

  // State for displayed word counts and loading states
  const [vocabDisplayCount, setVocabDisplayCount] = useState(10);
  const [phraseDisplayCount, setPhraseDisplayCount] = useState(8);
  const [isLoadingVocab, setIsLoadingVocab] = useState(false);
  const [isLoadingPhrases, setIsLoadingPhrases] = useState(false);

  // Handle loading more words
  const handleLoadMoreVocab = () => {
    setIsLoadingVocab(true);
    // Simulate loading delay
    setTimeout(() => {
      setVocabDisplayCount(prevCount => prevCount + 10);
      setIsLoadingVocab(false);
    }, 600);
  };

  const handleLoadMorePhrases = () => {
    setIsLoadingPhrases(true);
    // Simulate loading delay
    setTimeout(() => {
      setPhraseDisplayCount(prevCount => prevCount + 10);
      setIsLoadingPhrases(false);
    }, 600);
  };

  // Handle unified word bank button
  const handleExploreWordBank = () => {
    setShowWordBank(true);
    setShowVocabulary(true);
    setShowPhrases(true);
  };

  // Words to display based on current count limits
  const displayedVocabWords = allVocabularyWords.slice(0, vocabDisplayCount);
  const displayedPhraseWords = allPhraseWords.slice(0, phraseDisplayCount);

  // Check if there are more words to load
  const hasMoreVocab = vocabDisplayCount < allVocabularyWords.length;
  const hasMorePhrases = phraseDisplayCount < allPhraseWords.length;

  return (
    <Card className="mt-6 p-0 border-0 bg-transparent shadow-none">
      <Tabs 
        defaultValue="vocabulary" 
        value={activeTab}
        onValueChange={setActiveTab}
        className="relative"
      >
        <div className="mb-4 relative">
          <TabsList className="w-full flex gap-1 bg-white rounded-xl p-1 border border-gray-200 shadow-sm">
            <TabsTrigger 
              value="vocabulary" 
              className="flex-1 text-sm py-2.5 px-4 font-medium rounded-lg transition-all flex items-center justify-center gap-2
                      hover:bg-gray-50
                      data-[state=active]:border-2 data-[state=active]:border-primary data-[state=active]:text-primary data-[state=active]:font-bold"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4">
                <path d="M12 20V4"></path><path d="M20 8h-2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h2"></path><path d="M4 8h2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4"></path>
              </svg>
              Vocabulary
            </TabsTrigger>
            <TabsTrigger 
              value="phrases" 
              className="flex-1 text-sm py-2.5 px-4 font-medium rounded-lg transition-all flex items-center justify-center gap-2
                      hover:bg-gray-50
                      data-[state=active]:border-2 data-[state=active]:border-primary data-[state=active]:text-primary data-[state=active]:font-bold"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
              Useful collocations
            </TabsTrigger>
          </TabsList>
        </div>

        <TabsContent value="vocabulary" className="p-0 min-h-[200px]">
          {!showWordBank ? (
            <div className="flex flex-col justify-center items-center h-full w-full bg-gradient-to-b from-gray-50 to-white border border-gray-200 rounded-lg p-8 shadow-sm min-h-[200px]">
              <Button
                variant="outline"
                size="sm"
                className="mb-4 bg-white hover:bg-gray-50 shadow-sm border-gray-200 px-4"
                onClick={handleExploreWordBank}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-2 text-primary">
                  <path d="M12 20V4"></path><path d="M20 8h-2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h2"></path><path d="M4 8h2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4"></path>
                </svg>
                Explore Word Bank
              </Button>
              <p className="text-gray-700 font-medium text-base mb-2 text-center">Click to explore helpful vocabulary!</p>
              <p className="text-primary font-medium text-sm text-center">Build your writing skills with relevant words. üòâ</p>
            </div>
          ) : (
            <div className="space-y-6">
              {/* Vocabulary Section */}
              <div>
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4">
                    <path d="M12 20V4"></path><path d="M20 8h-2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h2"></path><path d="M4 8h2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4"></path>
                  </svg>
                  Vocabulary
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-4">
                  {displayedVocabWords.map((word, index) => (
                      <div 
                        key={`word-${index}`}
                        className="p-2.5 rounded-lg border border-primary/30 bg-primary/5 shadow-sm hover:shadow-md transition-shadow"
                      >
                        <div className="flex flex-wrap items-center gap-1.5 mb-1.5">
                          <span className="font-semibold text-sm text-primary">{word.word}</span>
                          <div className="text-xs font-medium px-1.5 py-0.5 bg-teal-100 text-teal-700 rounded-full">
                            {word.partOfSpeech}
                          </div>
                          <div className="text-xs px-1.5 py-0.5 bg-gray-100 text-gray-600 rounded-full">
                            {word.difficulty}
                          </div>
                        </div>
                        <p className="text-xs text-gray-700 mb-1">
                          <span className="font-medium">Meaning:</span> {word.meaning}
                        </p>
                        <p className="text-xs text-gray-600 italic border-t border-gray-200 pt-1 mt-1">
                          <span className="font-medium not-italic">Example:</span> {word.example}
                        </p>
                      </div>
                    )
                  )}
                </div>

                {/* Load more button for vocabulary */}
                {hasMoreVocab && (
                  <div className="flex justify-center mt-4 mb-2">
                    <Button 
                      variant="outline" 
                      onClick={handleLoadMoreVocab}
                      className="text-primary border-primary/30 hover:border-primary text-xs px-6 py-1.5 h-auto shadow-sm"
                      size="sm"
                      disabled={isLoadingVocab}
                    >
                      {isLoadingVocab ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Loading...
                        </>
                      ) : (
                        <>
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-2">
                            <path d="M12 8v8"></path><path d="M8 12h8"></path>
                          </svg>
                          Load More Words
                        </>
                      )}
                    </Button>
                  </div>
                )}
              </div>

              
            </div>
          )}
        </TabsContent>

        <TabsContent value="phrases" className="p-0 min-h-[200px]">
          {!showWordBank ? (
            <div className="flex flex-col justify-center items-center h-full w-full bg-gradient-to-b from-gray-50 to-white border border-gray-200 rounded-lg p-8 shadow-sm min-h-[200px]">
              <Button
                variant="outline"
                size="sm"
                className="mb-4 bg-white hover:bg-gray-50 shadow-sm border-gray-200 px-4"
                onClick={handleExploreWordBank}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-2 text-primary">
                  <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                </svg>
                Explore Word Bank
              </Button>
              <p className="text-gray-700 font-medium text-base mb-2 text-center">Click to explore useful collocations!</p>
              <p className="text-primary font-medium text-sm text-center">Master natural word combinations. üòâ</p>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-4">
                {displayedPhraseWords.map((phrase, index) => (
                    <div 
                      key={`phrase-${index}`}
                      className="p-2.5 rounded-lg border border-primary/30 bg-primary/5 shadow-sm hover:shadow-md transition-shadow"
                    >
                      <div className="flex flex-wrap items-center gap-1.5 mb-1.5">
                        <span className="font-semibold text-sm text-primary">{phrase.word}</span>
                        <div className="text-xs font-medium px-1.5 py-0.5 bg-blue-100 text-blue-700 rounded-full">
                          Collocation
                        </div>
                        <div className="text-xs px-1.5 py-0.5 bg-gray-100 text-gray-600 rounded-full">
                          {phrase.difficulty}
                        </div>
                      </div>
                      <p className="text-xs text-gray-700 mb-1">
                        <span className="font-medium">Meaning:</span> {phrase.meaning}
                      </p>
                      <p className="text-xs text-gray-600 italic border-t border-gray-200 pt-1 mt-1">
                        <span className="font-medium not-italic">Example:</span> {phrase.example}
                      </p>
                    </div>
                  )
                )}

                {/* Fill in empty cell if odd number of phrases */}
                {displayedPhraseWords.length % 2 !== 0 && (
                  <div className="hidden md:block" />
                )}
              </div>

              {/* Load more button for phrases */}
              {hasMorePhrases && (
                <div className="flex justify-center mt-4 mb-2">
                  <Button 
                    variant="outline" 
                    onClick={handleLoadMorePhrases}
                    className="text-primary border-primary/30 hover:border-primary text-xs px-6 py-1.5 h-auto shadow-sm"
                    size="sm"
                    disabled={isLoadingPhrases}
                  >
                    {isLoadingPhrases ? (
                      <>
                        <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Loading...
                      </>
                    ) : (
                      <>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-2">
                          <path d="M12 8v8"></path><path d="M8 12h8"></path>
                        </svg>
                        Load More Phrases
                      </>
                    )}
                  </Button>
                </div>
              )}
            </>
          )}
        </TabsContent>
      </Tabs>
    </Card>
  );
}

interface WritingInterfaceProps {
  testType: WritingTestType;
  difficulty: DifficultyLevel;
  topic: string;
  timeLimit: number;
  onSubmit: (essayContent: string) => void;
}

export function WritingInterface({
  testType,
  difficulty,
  topic,
  timeLimit,
  onSubmit,
}: WritingInterfaceProps) {
  const [essayContent, setEssayContent] = useState("");
  const [wordCount, setWordCount] = useState(0);
  const [isWordCountValid, setIsWordCountValid] = useState(true);
  const [showTimeUpDialog, setShowTimeUpDialog] = useState(false);
  const [showErrorDialog, setShowErrorDialog] = useState(false);

  const { formattedTime, isRunning, startTimer, updateTimer } = useTimer({
    initialMinutes: timeLimit,
    onTimeUp: () => setShowTimeUpDialog(true),
    autoStart: timeLimit > 0,
  });

  // Start timer when component mounts if time limit is set
  useEffect(() => {
    if (timeLimit > 0) {
      startTimer();
    }
  }, [timeLimit, startTimer]);

  const handleTimeSelect = (minutes: number) => {
    updateTimer(minutes);
    if (minutes > 0) {
      startTimer();
    }
  };

  const handleWordCountChange = (count: number, isValid: boolean) => {
    setWordCount(count);
    setIsWordCountValid(isValid);
  };

  const handleSubmit = () => {
    if (!isWordCountValid) {
      setShowErrorDialog(true);
      return;
    }
    onSubmit(essayContent);
  };

  const handleSaveDraft = () => {
    // Save to localStorage
    localStorage.setItem('essayDraft', essayContent);
    localStorage.setItem('essayTopic', topic);
    alert('Draft saved successfully');
  };

  const [showExitDialog, setShowExitDialog] = useState(false);

  return (
    <div className="p-4">
      <div className="flex mb-2">
        <Button 
          variant="outline" 
          size="sm"
          className="h-7 text-xs"
          onClick={() => setShowExitDialog(true)}
        >
          <ArrowLeft className="h-3 w-3 mr-1" /> Back
        </Button>
      </div>

      <div className="flex flex-col lg:flex-row lg:space-x-4">
        <div className="lg:w-3/5">
          <div className="bg-cyan-50 rounded-md p-4 mb-3 border-2 border-cyan-200 shadow-sm">
            <div className="text-cyan-700 font-medium mb-1">Question:</div>
            <div className="text-gray-700 text-sm">{topic}</div>
          </div>

          <div className="flex items-center justify-between mb-2 h-8">
            <Timer 
              time={formattedTime()} 
              onTimeSelect={handleTimeSelect}
              isRunning={isRunning}
            />
            <WordCounter
              count={wordCount}
              maxWords={500}
              isValid={isWordCountValid}
            />
          </div>

          <Editor
            value={essayContent}
            onChange={setEssayContent}
            onWordCountChange={handleWordCountChange}
          />

          <div className="flex justify-end mt-3">
            <Button
              onClick={handleSubmit}
              className="bg-primary hover:opacity-90 h-8 text-xs"
            >
              Submit Essay <Layers className="ml-1 h-3 w-3" />
            </Button>
          </div>
        </div>

        <div className="hidden lg:block lg:w-2/5 lg:pl-3 lg:flex lg:flex-col" style={{ minHeight: '500px' }}>
          <OutlineSection 
            testType={testType} 
            topic={topic} 
          />
        </div>
      </div>

      <div className="mt-4 lg:hidden">
        <OutlineSection 
          testType={testType} 
          topic={topic} 
        />
      </div>

      {/* Resources Section Below */}
      <ResourcesSection 
        testType={testType} 
        topic={topic} 
      />

      {/* Exit Confirmation Dialog */}
      <AlertDialog open={showExitDialog} onOpenChange={setShowExitDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Tho√°t kh·ªèi b√†i t·∫≠p?</AlertDialogTitle>
            <AlertDialogDescription>
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t kh·ªèi qu√° tr√¨nh l√†m b√†i? Ti·∫øn tr√¨nh l√†m b√†i c·ªßa b·∫°n s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u l·∫°i.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Ti·∫øp t·ª•c l√†m b√†i</AlertDialogCancel>
            <Link href="/writing-practice">
              <AlertDialogAction>
                Tho√°t
              </AlertDialogAction>
            </Link>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Time's Up Dialog */}
      <AlertDialog open={showTimeUpDialog} onOpenChange={setShowTimeUpDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Time's Up!</AlertDialogTitle>
            <AlertDialogDescription>
              Your allocated time for this essay has ended. Would you like to submit your work now or continue writing?
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Continue Writing</AlertDialogCancel>
            <AlertDialogAction onClick={() => {
              setShowTimeUpDialog(false);
              handleSubmit();
            }}>
              Submit Now
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Word Count Error Dialog */}
      <AlertDialog open={showErrorDialog} onOpenChange={setShowErrorDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Word Count Error</AlertDialogTitle>
            <AlertDialogDescription>
              Word limit requirement not met. Your essay should be between 50 and 500 words.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogAction onClick={() => setShowErrorDialog(false)}>
              OK
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}